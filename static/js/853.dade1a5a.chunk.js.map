{"version":3,"file":"static/js/853.dade1a5a.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.jsx","components/pages/MainPage/randomChar/RandomChar.jsx","components/pages/MainPage/MainPage.jsx","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import React, {Component} from 'react';\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({error: true});\n        console.log(error);\n        console.log(errorInfo)\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>;\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import img from './error.gif';\n\nconst ErrorMessage = () => {\n\treturn (\n\t\t<img className='error' src={img} alt=\"Error\" style={{ objectFit: 'contain', width: '250px', heigth: '250px', margin: '0 auto', display: 'block' }} />\n\t)\n}\n\nexport default ErrorMessage;","import {useEffect, useState} from 'react';\nimport Spinner from '../../../spinner/Spinner';\nimport ErrorMessage from '../../../errorMessage/ErrorMessage';\nimport useMarvelService from '../../../../services/MarvelService';\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\n\n\nimport './randomChar.scss';\nimport mjolnir from '../../../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState(null);\n    const [inProp, setInProp] = useState(false);\n\n\n    const {error, loading, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.round(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id).then(onCharLoaded);\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(error || loading || !char) ? <View char={char} inProp={inProp}/> : null;\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char, inProp}) => {\n    const {name, description, homepage, wiki, thumbnail} = char;\n    const imgStyle = thumbnail.includes('image_not_available')\n    || thumbnail.includes('4c002e0305708')\n        ? {objectFit: 'fill'}\n        : {objectFit: 'cover'};\n    return (\n\n        <div className=\"randomchar__block\">\n            <TransitionGroup component={null} appear={true}>\n                <CSSTransition\n                    in={inProp}\n                    timeout={1500}\n                    classNames=\"randomchar__img\"\n                >\n                    <img\n                        src={thumbnail}\n                        alt={name}\n                        className=\"randomchar__img\"\n                        style={imgStyle}\n                    />\n                </CSSTransition>\n            </TransitionGroup>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import RandomChar from \"./randomChar/RandomChar\";\nimport CharList from \"./charList/CharList\";\nimport {useState} from \"react\";\nimport ErrorBoundary from \"../../errorBoundary/ErrorBoundary\";\nimport CharInfo from \"./charInfo/CharInfo\";\nimport decoration from \"../../../resources/img/vision.png\";\n\nconst MainPage = () => {\n    const [selectedItem, setItem] = useState(0);\n\n    const onItemSelected = (itemId) => {\n        setItem(itemId);\n    }\n\n    return (\n        <div>\n            <>\n                <ErrorBoundary>\n                    <RandomChar/>\n                </ErrorBoundary>\n                {/*<div className=\"char\">*/}\n                {/*    <ErrorBoundary>*/}\n                {/*        <CharList onCharSelected={onItemSelected}/>*/}\n                {/*    </ErrorBoundary>*/}\n                {/*    <ErrorBoundary>*/}\n                {/*        <CharInfo charId={selectedItem}/>*/}\n                {/*    </ErrorBoundary>*/}\n                {/*</div>*/}\n                {/*<img className=\"bg-decoration\"*/}\n                {/*     src={decoration}*/}\n                {/*     alt=\"vision\"/>*/}\n            </>\n        </div>\n    );\n};\n\nexport default MainPage;\n","import {useHttp} from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=9348dbb59adab6792791d34da902e88b';\n    const _limit = 9;\n    const _baseOffset = 1200;\n\n    const {error, loading, request, clearError} = useHttp();\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=${_limit}&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=23000&${_apiKey}`);\n        return res.data.results.map(_transformComics)\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformComics = (comics) => {\n        const thumbnail = `${comics.thumbnail.path}.${comics.thumbnail.extension}`;\n        const description = (str) => str ? str : 'The description for this comic was destroyed by Tanos';\n        return {\n            id: comics.id,\n            title: comics.title,\n            price: comics.prices[0].price ? `$${comics.prices[0].price}` : 'not available',\n            description: description(comics.description),\n            pages: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\n            language: 'en-us',\n            thumbnail\n        }\n    }\n\n    const _transformCharacter = (char) => {\n        const description = (str, num) => {\n            if (str) {\n                if (str.length > 150) {\n                    return str.slice(0, num) + '...';\n                }\n                return str;\n            } else return 'The description for this character was destroyed by Tanos';\n        }\n        return {\n            comics: char.comics.items,\n            id: char.id,\n            name: char.name,\n            description: description(char.description, 150),\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`\n        }\n    }\n\n    return {error, loading, getCharacter, getAllCharacters, clearError, getAllComics, getComic};\n}\n\nexport default useMarvelService;","import {useCallback, useState} from \"react\";\n\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${request.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n        } catch (e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, error, request, clearError}\n}"],"names":["ErrorBoundary","state","error","errorInfo","this","setState","console","log","props","children","Component","className","src","img","alt","style","objectFit","width","heigth","margin","display","View","char","inProp","name","description","homepage","wiki","thumbnail","imgStyle","includes","TransitionGroup","component","appear","CSSTransition","in","timeout","classNames","href","useState","setChar","useMarvelService","loading","getCharacter","clearError","useEffect","updateChar","id","Math","round","random","then","onCharLoaded","errorMessage","spinner","content","onClick","mjolnir","_apiBase","_apiKey","_baseOffset","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","getAllCharacters","offset","res","results","map","_transformCharacter","getAllComics","_transformComics","getComic","comics","str","path","extension","title","price","prices","pages","pageCount","language","num","items","length","slice","urls"],"sourceRoot":""}