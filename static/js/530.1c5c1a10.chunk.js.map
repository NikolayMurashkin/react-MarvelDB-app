{"version":3,"file":"static/js/530.1c5c1a10.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.jsx","components/pages/ComicsPage/comicsHeader/ComicsHeader.jsx","components/pages/ComicsPage/comicsListItem/ComicsListItem.jsx","components/pages/ComicsPage/comicsList/ComicsList.jsx","components/pages/ComicsPage/ComicsPage.jsx","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import React, {Component} from 'react';\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({error: true});\n        console.log(error);\n        console.log(errorInfo)\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>;\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import img from './error.gif';\n\nconst ErrorMessage = () => {\n\treturn (\n\t\t<img className='error' src={img} alt=\"Error\" style={{ objectFit: 'contain', width: '250px', heigth: '250px', margin: '0 auto', display: 'block' }} />\n\t)\n}\n\nexport default ErrorMessage;","import './comicsHeader.scss';\nimport avengers from '../../../../resources/img/Avengers.png';\nimport avengersLogo from '../../../../resources/img/Avengers_logo.png';\n\nconst ComicsHeader = () => {\n\n    return (\n        <div className='comics__header'>\n            <img src={avengers} alt=\"avengers\" className='avengers'/>\n            <div className=\"comics__header-text\">\n                <p>New comics every week! <br/>\n                    Stay tuned!</p>\n            </div>\n            <img src={avengersLogo} alt=\"avengers logo\" className='avengersLogo'/>\n        </div>\n    );\n};\n\nexport default ComicsHeader;\n","import classNames from \"classnames\";\nimport {Link} from \"react-router-dom\";\n\nconst CharListItem = (props) => {\n\n    const {img, title, price, id} = props;\n    const imgStyle = img.includes('image_not_available') || img.includes('4c002e0305708') ? {objectFit: 'fill'} : {objectFit: 'cover'};\n\n    return (\n        <li\n            className={classNames(\"comics__item\")}>\n            <Link to={`/comics/${id}`}>\n                <img style={imgStyle} src={img} alt={title} className=\"comics__item-img\"/>\n                <div className=\"comics__item-name\">{title}</div>\n                <div className=\"comics__item-price\">{price}</div>\n            </Link>\n        </li>\n    );\n}\n\nexport default CharListItem;","import './comicsList.scss';\nimport {useState, useEffect} from \"react\";\nimport useMarvelService from \"../../../../services/MarvelService\";\nimport ErrorMessage from \"../../../errorMessage/ErrorMessage\";\nimport Spinner from \"../../../spinner/Spinner\";\nimport ComicsListItem from \"../comicsListItem/ComicsListItem\";\n\nconst ComicsList = (props) => {\n    const [comics, setComics] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(520);\n    const [comicEnded, setComicEnded] = useState(false);\n\n    const {error, clearError, loading, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onLoadMore()\n    }, []);\n\n    const onComicsLoaded = (newComics) => {\n        let ended = false;\n        if (newComics.length < 8) {\n            ended = true;\n        }\n\n        setComics(comics => [...comics, ...newComics]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 8);\n        setComicEnded(ended);\n    }\n\n    const onLoadMore = (offset) => {\n        clearError();\n        setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = <View comics={comics} onComicSelected={props.onComicSelected}/>;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <button\n                disabled={newItemLoading}\n                onClick={() => onLoadMore(offset)}\n                style={{'display': comicEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\">\n                <div className=\"inner\">{newItemLoading ? 'data is loading' : 'load more'}</div>\n            </button>\n        </div>\n    )\n}\n\nconst View = (props) => {\n\n    const {comics} = props;\n    return (\n        <ul className=\"comics__grid\">\n            {comics.map((comic, i) => {\n                return (\n                    <ComicsListItem\n                        id={comic.id}\n                        key={i}\n                        title={comic.title}\n                        img={comic.thumbnail}\n                        price={comic.price}/>\n                )\n            })}\n        </ul>\n\n    )\n}\nexport default ComicsList;","import React from 'react';\nimport {useState} from \"react\";\nimport ErrorBoundary from \"../../errorBoundary/ErrorBoundary\";\nimport ComicsHeader from \"./comicsHeader/ComicsHeader\";\nimport ComicsList from \"./comicsList/ComicsList\";\n\nconst ComicsPage = () => {\n    const [selectedItem, setItem] = useState(0);\n\n    const onItemSelected = (itemId) => {\n        setItem(itemId);\n    }\n\n    return (\n        <div>\n            <>\n                <ComicsHeader/>\n                <ErrorBoundary>\n                    <ComicsList onComicSelected={onItemSelected}/>\n                </ErrorBoundary>\n            </>\n        </div>\n    );\n};\n\nexport default ComicsPage;\n","import {useHttp} from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=9348dbb59adab6792791d34da902e88b';\n    const _limit = 9;\n    const _baseOffset = 1200;\n\n    const {error, loading, request, clearError} = useHttp();\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=${_limit}&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=23000&${_apiKey}`);\n        return res.data.results.map(_transformComics)\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformComics = (comics) => {\n        const thumbnail = `${comics.thumbnail.path}.${comics.thumbnail.extension}`;\n        const description = (str) => str ? str : 'The description for this comic was destroyed by Tanos';\n        return {\n            id: comics.id,\n            title: comics.title,\n            price: comics.prices[0].price ? `$${comics.prices[0].price}` : 'not available',\n            description: description(comics.description),\n            pages: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\n            language: 'en-us',\n            thumbnail\n        }\n    }\n\n    const _transformCharacter = (char) => {\n        const description = (str, num) => {\n            if (str) {\n                if (str.length > 150) {\n                    return str.slice(0, num) + '...';\n                }\n                return str;\n            } else return 'The description for this character was destroyed by Tanos';\n        }\n        return {\n            comics: char.comics.items,\n            id: char.id,\n            name: char.name,\n            description: description(char.description, 150),\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`\n        }\n    }\n\n    return {error, loading, getCharacter, getAllCharacters, clearError, getAllComics, getComic};\n}\n\nexport default useMarvelService;","import {useCallback, useState} from \"react\";\n\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${request.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n        } catch (e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, error, request, clearError}\n}"],"names":["ErrorBoundary","state","error","errorInfo","this","setState","console","log","props","children","Component","className","src","img","alt","style","objectFit","width","heigth","margin","display","avengers","avengersLogo","title","price","id","imgStyle","includes","classNames","to","View","comics","map","comic","i","ComicsListItem","thumbnail","useState","setComics","newItemLoading","setNewItemLoading","offset","setOffset","comicEnded","setComicEnded","useMarvelService","clearError","loading","getAllComics","useEffect","onLoadMore","onComicsLoaded","newComics","ended","length","then","errorMessage","ErrorMessage","spinner","Spinner","content","onComicSelected","disabled","onClick","setItem","itemId","_apiBase","_apiKey","_baseOffset","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","getAllCharacters","res","results","_transformCharacter","getCharacter","_transformComics","getComic","str","path","extension","prices","description","pages","pageCount","language","char","num","items","name","slice","homepage","urls","wiki"],"sourceRoot":""}