{"version":3,"file":"static/js/997.8a38a490.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.jsx","components/pages/MainPage/randomChar/RandomChar.jsx","components/pages/MainPage/charListItem/CharListItem.jsx","components/pages/MainPage/charList/CharList.jsx","components/pages/MainPage/skeleton/Skeleton.jsx","components/pages/MainPage/charInfo/CharInfo.jsx","components/pages/MainPage/charSearchForm/CharSearchForm.jsx","components/pages/MainPage/MainPage.jsx"],"sourcesContent":["import React, {Component} from 'react';\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({error: true});\n        console.log(error);\n        console.log(errorInfo)\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>;\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import img from './error.gif';\n\nconst ErrorMessage = () => {\n\treturn (\n\t\t<img className='error' src={img} alt=\"Error\" style={{ objectFit: 'contain', width: '250px', heigth: '250px', margin: '0 auto', display: 'block' }} />\n\t)\n}\n\nexport default ErrorMessage;","import {useEffect, useState} from 'react';\nimport Spinner from '../../../spinner/Spinner';\nimport ErrorMessage from '../../../errorMessage/ErrorMessage';\nimport useMarvelService from '../../../../services/MarvelService';\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\n\n\nimport './randomChar.scss';\nimport mjolnir from '../../../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState(null);\n\n    const {error, loading, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.round(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id).then(onCharLoaded);\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(error || loading || !char) ? <View char={char}/> : null;\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, homepage, wiki, thumbnail} = char;\n    const imgStyle = thumbnail.includes('image_not_available')\n    || thumbnail.includes('4c002e0305708')\n        ? {objectFit: 'fill'}\n        : {objectFit: 'cover'};\n    return (\n\n        <div className=\"randomchar__block\">\n            <TransitionGroup component={null} appear={true}>\n                <CSSTransition\n                    timeout={500}\n                    classNames=\"randomchar__img\"\n                >\n                    <img\n                        src={thumbnail}\n                        alt={name}\n                        className=\"randomchar__img\"\n                        style={imgStyle}\n                    />\n                </CSSTransition>\n            </TransitionGroup>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import classNames from \"classnames\";\n\nconst CharListItem = (props) => {\n\n    const onFocus = (e) => {\n        props.onFocus(e)\n        props.onCharSelected(props.id);\n    }\n\n    const {img, name} = props;\n    const imgStyle = img.includes('image_not_available') || img.includes('4c002e0305708') ? {objectFit: 'fill'} : {objectFit: 'cover'};\n\n    return (\n        <li key={props.id}\n            tabIndex={0}\n            onFocus={(e) => onFocus(e)}\n            className={classNames(\"char__item\")}>\n            <img src={img} alt={name}\n                 style={imgStyle}/>\n            <div className=\"char__name\">{name}</div>\n        </li>\n    );\n}\n\nexport default CharListItem;","import './charList.scss';\nimport {useState, useEffect, useRef} from 'react';\nimport useMarvelService from '../../../../services/MarvelService';\nimport CharListItem from '../charListItem/CharListItem';\nimport ErrorMessage from \"../../../errorMessage/ErrorMessage\";\nimport Spinner from \"../../../spinner/Spinner\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\n\nconst CharList = (props) => {\n    const [characters, setCharacters] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(520);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {error, clearError, loading, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onLoadMore()\n    }, []);\n\n    const onCharListLoaded = (newChars) => {\n        let ended = false;\n        if (newChars.length < 9) {\n            ended = true;\n        }\n\n        setCharacters(characters => [...characters, ...newChars]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended);\n    }\n\n    const onLoadMore = (offset) => {\n        clearError();\n        setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n    const content = <View chars={characters} onCharSelected={props.onCharSelected}/>;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <button\n                disabled={newItemLoading}\n                onClick={() => onLoadMore(offset)}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\">\n                <div className=\"inner\">{newItemLoading ? 'data is loading' : 'load more'}</div>\n            </button>\n        </div>\n    )\n}\n\nconst View = (props) => {\n    const itemRef = useRef(null);\n\n    const onFocusChar = (e) => {\n        if (itemRef.current) {\n            itemRef.current.classList.remove('char__item_selected')\n        }\n\n        const target = e.target.closest('.char__item');\n\n        itemRef.current = target;\n        itemRef.current.classList.add('char__item_selected');\n    }\n\n    const {chars, onCharSelected} = props;\n\n    return (\n        <TransitionGroup component={'ul'} appear={true} className=\"char__grid\">\n            {chars.map((char, i) => {\n                return (\n                    <CSSTransition key={i} timeout={0} classNames=\"charListItem\">\n                        <CharListItem\n                            onFocus={onFocusChar}\n                            onCharSelected={onCharSelected}\n                            id={char.id}\n                            key={i}\n                            name={char.name}\n                            img={char.thumbnail}/>\n                    </CSSTransition>\n                )\n            })}\n        </TransitionGroup>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import './charInfo.scss';\nimport useMarvelService from \"../../../../services/MarvelService\";\nimport {useState, useEffect} from \"react\";\nimport ErrorMessage from \"../../../errorMessage/ErrorMessage\";\nimport Spinner from \"../../../spinner/Spinner\";\nimport Skeleton from \"../skeleton/Skeleton\";\nimport PropTypes from 'prop-types';\nimport {Link} from \"react-router-dom\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\n\nconst CharInfo = (props) => {\n    const [selectedChar, setSelectedChar] = useState(0);\n\n    const {error, clearError, loading, getCharacter} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId]);\n\n    const onCharLoaded = (char) => {\n        setSelectedChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const charId = props.charId;\n        if (!charId) {\n            return\n        }\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const skeleton = selectedChar || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && selectedChar ? <Spinner/> : null;\n    const content = !(error || loading || !selectedChar) ? <View char={selectedChar}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, homepage, wiki, thumbnail, comics} = char;\n\n\n    const imgStyle = char.thumbnail.includes('image_not_available') || char.thumbnail.includes('4c002e0305708')\n        ? {objectFit: 'fill'}\n        : {objectFit: 'cover'};\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <h3 className=\"char__comics\">Comics:</h3>\n            <TransitionGroup component={'ul'} appear={true} className=\"char__comics-list\">\n                {comics.length > 0 ? null : \"There is no comics with this character\"}\n                {comics.map((item, i) => {\n                    const comicId = item.resourceURI.replace(/\\D/g, \"\").slice(1);\n                    // eslint-disable-next-line\n                    if (i > 9) return;\n                    return <CSSTransition key={i} timeout={0} classNames=\"char__comics-item\">\n                        <li key={i} className=\"char__comics-item\">\n                            <Link to={`/comics/${comicId}`}>{item.name}</Link>\n                        </li>\n                    </CSSTransition>\n                })}\n            </TransitionGroup>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number.isRequired\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport {Formik, Form, Field, ErrorMessage as FormikErrorMessage} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from \"../../../../services/MarvelService\";\r\nimport ErrorMessage from \"../../../errorMessage/ErrorMessage\";\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage/></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\"/>\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\"/>\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import RandomChar from \"./randomChar/RandomChar\";\nimport CharList from \"./charList/CharList\";\nimport {useState} from \"react\";\nimport ErrorBoundary from \"../../errorBoundary/ErrorBoundary\";\nimport CharInfo from \"./charInfo/CharInfo\";\nimport decoration from \"../../../resources/img/vision.png\";\nimport CharSearchForm from \"./charSearchForm/CharSearchForm\";\n\nconst MainPage = () => {\n    const [selectedItem, setItem] = useState(0);\n\n    const onItemSelected = (itemId) => {\n        setItem(itemId);\n    }\n\n    return (\n        <div>\n            <>\n                <ErrorBoundary>\n                    <RandomChar/>\n                </ErrorBoundary>\n                <div className=\"char\">\n                    <ErrorBoundary>\n                        <CharList onCharSelected={onItemSelected}/>\n                    </ErrorBoundary>\n                    <div>\n                        <ErrorBoundary>\n                            <CharInfo charId={selectedItem}/>\n                        </ErrorBoundary>\n                        <ErrorBoundary>\n                            <CharSearchForm/>\n                        </ErrorBoundary>\n                    </div>\n                </div>\n                <img className=\"bg-decoration\"\n                     src={decoration}\n                     alt=\"vision\"/>\n            </>\n        </div>\n    );\n};\n\nexport default MainPage;\n"],"names":["ErrorBoundary","state","error","errorInfo","this","setState","console","log","props","children","Component","className","src","img","alt","style","objectFit","width","heigth","margin","display","View","char","name","description","homepage","wiki","thumbnail","imgStyle","includes","TransitionGroup","component","appear","CSSTransition","timeout","classNames","href","useState","setChar","useMarvelService","loading","getCharacter","clearError","useEffect","updateChar","id","Math","round","random","then","onCharLoaded","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","tabIndex","onFocus","e","onCharSelected","itemRef","useRef","onFocusChar","current","classList","remove","target","closest","add","chars","map","i","characters","setCharacters","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onLoadMore","onCharListLoaded","newChars","ended","length","disabled","comics","item","comicId","resourceURI","replace","slice","to","selectedChar","setSelectedChar","charId","skeleton","getCharacterByName","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","selectedItem","setItem","itemId","decoration"],"sourceRoot":""}